// Mocks generated by Mockito 5.0.10 from annotations
// in your_budget/test/domain/account/account_creator_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:your_budget/domain/account/account.dart' as _i8;
import 'package:your_budget/domain/account/i_account_repository.dart' as _i7;
import 'package:your_budget/domain/core/value_failure.dart' as _i5;
import 'package:your_budget/domain/payee/i_payee_repository.dart' as _i11;
import 'package:your_budget/domain/payee/payee.dart' as _i12;
import 'package:your_budget/domain/subcategory/i_subcategory_repository.dart'
    as _i9;
import 'package:your_budget/domain/subcategory/subcategory.dart' as _i10;
import 'package:your_budget/domain/transaction/i_transaction_repository.dart'
    as _i3;
import 'package:your_budget/domain/transaction/transaction.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {
  @override
  String toString() => super.toString();
}

/// A class which mocks [ITransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i3.ITransactionRepository {
  MockTransactionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>> create(
          _i6.MoneyTransaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#create, [transaction]),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>> update(
          _i6.MoneyTransaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#update, [transaction]),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>> delete(
          _i6.MoneyTransaction? transaction) =>
      (super.noSuchMethod(Invocation.method(#delete, [transaction]),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>>
      getAccountTransactions(int? accountID) => (super.noSuchMethod(
              Invocation.method(#getAccountTransactions, [accountID]),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>()))
          as _i4.Future<
              _i2.Either<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>>);
  @override
  _i4.Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>>
      watchAccountTransactions(int? accountID) => (super.noSuchMethod(
              Invocation.method(#watchAccountTransactions, [accountID]),
              returnValue:
                  Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i6.MoneyTransaction>>>.empty())
          as _i4.Stream<
              _i2.Either<_i5.ValueFailure<dynamic>,
                  List<_i6.MoneyTransaction>>>);
}

/// A class which mocks [IAccountRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountRepository extends _i1.Mock implements _i7.IAccountRepository {
  MockAccountRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int>> create(
          _i8.Account? account) =>
      (super.noSuchMethod(Invocation.method(#create, [account]),
          returnValue: Future<_i2.Either<_i5.ValueFailure<dynamic>, int>>.value(
              _FakeEither<_i5.ValueFailure<dynamic>, int>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, int>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i8.Account>> get(
          int? accountId) =>
      (super.noSuchMethod(Invocation.method(#get, [accountId]),
          returnValue:
              Future<_i2.Either<_i5.ValueFailure<dynamic>, _i8.Account>>.value(
                  _FakeEither<_i5.ValueFailure<dynamic>, _i8.Account>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, _i8.Account>>);
  @override
  _i4.Future<
      _i2.Either<_i5.ValueFailure<dynamic>,
          List<_i8.Account>>> getAllAccounts() => (super.noSuchMethod(
      Invocation.method(#getAllAccounts, []),
      returnValue:
          Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i8.Account>>>.value(
              _FakeEither<_i5.ValueFailure<dynamic>, List<_i8.Account>>())) as _i4
      .Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i8.Account>>>);
  @override
  _i4.Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i8.Account>>>
      watchAllAccounts() => (super.noSuchMethod(
          Invocation.method(#watchAllAccounts, []),
          returnValue: Stream<
              _i2.Either<_i5.ValueFailure<dynamic>,
                  List<_i8.Account>>>.empty()) as _i4
          .Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i8.Account>>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>> count() =>
      (super.noSuchMethod(Invocation.method(#count, []),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, int?>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>);
}

/// A class which mocks [ISubcategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubcategoryRepository extends _i1.Mock
    implements _i9.ISubcategoryRepository {
  MockSubcategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int>> create(
          _i10.Subcategory? subcategory) =>
      (super.noSuchMethod(Invocation.method(#create, [subcategory]),
          returnValue: Future<_i2.Either<_i5.ValueFailure<dynamic>, int>>.value(
              _FakeEither<_i5.ValueFailure<dynamic>, int>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, int>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i10.Subcategory>>>
      getAllSubcategories() => (super.noSuchMethod(
          Invocation.method(#getAllSubcategories, []),
          returnValue:
              Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i10.Subcategory>>>.value(
                  _FakeEither<_i5.ValueFailure<dynamic>,
                      List<_i10.Subcategory>>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i10.Subcategory>>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i10.Subcategory>>
      getToBeBudgetedSubcategory() => (super.noSuchMethod(
          Invocation.method(#getToBeBudgetedSubcategory, []),
          returnValue: Future<
                  _i2.Either<_i5.ValueFailure<dynamic>, _i10.Subcategory>>.value(
              _FakeEither<_i5.ValueFailure<dynamic>, _i10.Subcategory>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, _i10.Subcategory>>);
  @override
  _i4.Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i10.Subcategory>>>
      watchAllSubcategories() =>
          (super.noSuchMethod(Invocation.method(#watchAllSubcategories, []),
              returnValue: Stream<
                  _i2.Either<_i5.ValueFailure<dynamic>,
                      List<_i10.Subcategory>>>.empty()) as _i4.Stream<
              _i2.Either<_i5.ValueFailure<dynamic>, List<_i10.Subcategory>>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>> count() =>
      (super.noSuchMethod(Invocation.method(#count, []),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, int?>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>);
}

/// A class which mocks [IPayeeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPayeeRepository extends _i1.Mock implements _i11.IPayeeRepository {
  MockPayeeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>> create(
          _i12.Payee? payee) =>
      (super.noSuchMethod(Invocation.method(#create, [payee]),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, _i2.Unit>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i2.Unit>>);
  @override
  _i4.Future<
      _i2.Either<_i5.ValueFailure<dynamic>,
          List<_i12.Payee>>> getAllPayees() => (super.noSuchMethod(
      Invocation.method(#getAllPayees, []),
      returnValue:
          Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i12.Payee>>>.value(
              _FakeEither<_i5.ValueFailure<dynamic>, List<_i12.Payee>>())) as _i4
      .Future<_i2.Either<_i5.ValueFailure<dynamic>, List<_i12.Payee>>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, _i12.Payee>>
      getToBeBudgetedPayee() => (super.noSuchMethod(
          Invocation.method(#getToBeBudgetedPayee, []),
          returnValue:
              Future<_i2.Either<_i5.ValueFailure<dynamic>, _i12.Payee>>.value(
                  _FakeEither<_i5.ValueFailure<dynamic>, _i12.Payee>())) as _i4
          .Future<_i2.Either<_i5.ValueFailure<dynamic>, _i12.Payee>>);
  @override
  _i4.Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i12.Payee>>>
      watchAllPayees() =>
          (super.noSuchMethod(Invocation.method(#watchAllPayees, []),
              returnValue: Stream<
                  _i2.Either<_i5.ValueFailure<dynamic>,
                      List<_i12.Payee>>>.empty()) as _i4
              .Stream<_i2.Either<_i5.ValueFailure<dynamic>, List<_i12.Payee>>>);
  @override
  _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>> count() =>
      (super.noSuchMethod(Invocation.method(#count, []),
              returnValue:
                  Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>.value(
                      _FakeEither<_i5.ValueFailure<dynamic>, int?>()))
          as _i4.Future<_i2.Either<_i5.ValueFailure<dynamic>, int?>>);
}
